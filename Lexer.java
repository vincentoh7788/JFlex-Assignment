// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: ruby.flex

/*
 * JFlex example from the user Manual
 *
 * Copyright 2020, Gerwin Klein, Régis Décamps, Steve Rowe
 * SPDX-License-Identifier: GPL-2.0-only
 */

import java_cup.runtime.Symbol;

/** Modified as a Ruby lexical analyzer */


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\0\1\4\1\5\22\0"+
    "\1\2\1\6\1\7\1\10\1\11\1\12\1\13\1\0"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\11\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\32\35\1\36\1\37\1\40\1\41\1\42\1\0"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\35\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\35\1\62\1\63\1\64\1\65\1\35\1\66\1\67"+
    "\1\70\1\35\1\71\1\72\1\73\1\74\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\3\3\1\4\1\5\1\3\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\20\31\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\0\1\53\1\54"+
    "\1\55\1\56\1\57\7\31\1\60\4\31\1\61\1\62"+
    "\4\31\1\63\10\31\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\2\0\1\72\1\31\1\73\4\31\1\74\1\31"+
    "\1\75\2\31\1\76\2\31\1\77\1\100\15\31\1\0"+
    "\1\3\3\31\1\101\2\31\1\102\4\31\1\103\1\104"+
    "\3\31\1\105\1\31\1\106\1\107\3\31\1\110\2\31"+
    "\1\111\1\112\1\113\1\114\1\31\1\115\1\31\1\116"+
    "\2\31\1\117\1\31\1\120\1\121\1\31\1\122\1\123"+
    "\1\124\1\31\1\125\1\126\1\127\1\130\1\131\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\267\0\172\0\364\0\u0131"+
    "\0\172\0\u016e\0\172\0\u01ab\0\u01e8\0\172\0\172\0\u0225"+
    "\0\u0262\0\172\0\u029f\0\172\0\u02dc\0\172\0\u0319\0\172"+
    "\0\172\0\u0356\0\u0393\0\u03d0\0\172\0\u040d\0\u044a\0\172"+
    "\0\172\0\172\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8"+
    "\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0"+
    "\0\u07dd\0\u081a\0\172\0\u0857\0\172\0\172\0\u0894\0\172"+
    "\0\u08d1\0\172\0\172\0\172\0\u090e\0\172\0\172\0\172"+
    "\0\u094b\0\172\0\u0988\0\172\0\172\0\172\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u044a\0\u0b70\0\u0bad"+
    "\0\u0bea\0\u0c27\0\u044a\0\u044a\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b"+
    "\0\u044a\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6"+
    "\0\u0f03\0\172\0\172\0\172\0\172\0\172\0\172\0\u0f40"+
    "\0\u0f7d\0\172\0\u0fba\0\u044a\0\u0ff7\0\u1034\0\u1071\0\u10ae"+
    "\0\u10eb\0\u1128\0\u044a\0\u1165\0\u11a2\0\u044a\0\u11df\0\u121c"+
    "\0\u044a\0\u044a\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572"+
    "\0\u0f40\0\u15af\0\u15ec\0\u1629\0\u044a\0\u1666\0\u16a3\0\u044a"+
    "\0\u16e0\0\u171d\0\u175a\0\u1797\0\u044a\0\u044a\0\u17d4\0\u1811"+
    "\0\u184e\0\u044a\0\u188b\0\u044a\0\u044a\0\u18c8\0\u1905\0\u1942"+
    "\0\u044a\0\u197f\0\u19bc\0\u044a\0\u044a\0\u044a\0\u044a\0\u19f9"+
    "\0\u044a\0\u1a36\0\u044a\0\u1a73\0\u1ab0\0\u044a\0\u1aed\0\u044a"+
    "\0\u044a\0\u1b2a\0\u044a\0\u044a\0\u044a\0\u1b67\0\u044a\0\u044a"+
    "\0\u044a\0\u044a\0\u044a\0\u044a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\3\1\41"+
    "\1\42\1\3\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\2\37\1\51\2\37\1\52\1\53\1\54\1\37\1\55"+
    "\1\56\1\57\1\60\1\61\1\37\1\62\1\63\1\64"+
    "\1\65\1\66\3\67\1\3\1\67\1\3\1\67\1\70"+
    "\27\67\1\71\35\67\76\0\3\4\74\0\1\6\122\0"+
    "\1\72\43\0\3\12\1\6\1\12\1\7\67\12\31\0"+
    "\1\73\56\0\1\74\77\0\1\75\12\0\1\76\74\0"+
    "\1\77\74\0\1\100\61\0\1\101\12\0\1\102\67\0"+
    "\2\27\100\0\1\103\74\0\1\104\74\0\1\105\77\0"+
    "\1\106\64\0\2\37\7\0\1\37\4\0\27\37\30\0"+
    "\2\37\7\0\1\37\4\0\13\37\1\107\1\37\1\110"+
    "\11\37\30\0\2\37\7\0\1\37\4\0\5\37\1\111"+
    "\12\37\1\112\6\37\30\0\2\37\7\0\1\37\4\0"+
    "\1\37\1\113\11\37\1\114\13\37\30\0\2\37\7\0"+
    "\1\37\4\0\5\37\1\115\10\37\1\116\10\37\30\0"+
    "\2\37\7\0\1\37\4\0\13\37\1\117\1\37\1\120"+
    "\11\37\30\0\2\37\7\0\1\37\4\0\1\37\1\121"+
    "\14\37\1\122\10\37\30\0\2\37\7\0\1\37\4\0"+
    "\6\37\1\123\6\37\1\124\11\37\30\0\2\37\7\0"+
    "\1\37\4\0\16\37\1\125\10\37\30\0\2\37\7\0"+
    "\1\37\4\0\5\37\1\126\3\37\1\127\4\37\1\130"+
    "\10\37\30\0\2\37\7\0\1\37\4\0\20\37\1\131"+
    "\6\37\30\0\2\37\7\0\1\37\4\0\5\37\1\132"+
    "\21\37\30\0\2\37\7\0\1\37\4\0\5\37\1\133"+
    "\15\37\1\134\3\37\30\0\2\37\7\0\1\37\4\0"+
    "\10\37\1\135\7\37\1\136\6\37\30\0\2\37\7\0"+
    "\1\37\4\0\15\37\1\137\11\37\30\0\2\37\7\0"+
    "\1\37\4\0\10\37\1\140\16\37\30\0\2\37\7\0"+
    "\1\37\4\0\11\37\1\141\15\37\76\0\1\142\2\0"+
    "\3\67\1\0\1\67\1\0\1\67\1\0\27\67\1\0"+
    "\35\67\7\0\1\143\47\0\1\144\2\0\1\145\1\0"+
    "\1\146\41\0\1\147\43\0\16\150\1\151\56\150\32\0"+
    "\1\152\66\0\2\37\7\0\1\37\4\0\11\37\1\153"+
    "\15\37\30\0\2\37\7\0\1\37\4\0\4\37\1\154"+
    "\22\37\30\0\2\37\7\0\1\37\4\0\7\37\1\155"+
    "\17\37\30\0\2\37\7\0\1\37\4\0\5\37\1\156"+
    "\21\37\30\0\2\37\7\0\1\37\4\0\21\37\1\157"+
    "\5\37\30\0\2\37\7\0\1\37\4\0\1\37\1\160"+
    "\25\37\30\0\2\37\7\0\1\37\4\0\6\37\1\161"+
    "\20\37\30\0\2\37\7\0\1\37\4\0\21\37\1\162"+
    "\5\37\30\0\2\37\7\0\1\37\4\0\4\37\1\163"+
    "\14\37\1\164\5\37\30\0\2\37\7\0\1\37\4\0"+
    "\13\37\1\165\13\37\30\0\2\37\7\0\1\37\4\0"+
    "\20\37\1\166\6\37\30\0\2\37\7\0\1\37\4\0"+
    "\4\37\1\167\22\37\30\0\2\37\7\0\1\37\4\0"+
    "\25\37\1\170\1\37\30\0\2\37\7\0\1\37\4\0"+
    "\13\37\1\171\13\37\30\0\2\37\7\0\1\37\4\0"+
    "\22\37\1\172\4\37\30\0\2\37\7\0\1\37\4\0"+
    "\4\37\1\173\14\37\1\174\1\175\4\37\30\0\2\37"+
    "\7\0\1\37\4\0\13\37\1\176\13\37\30\0\2\37"+
    "\7\0\1\37\4\0\17\37\1\177\7\37\30\0\2\37"+
    "\7\0\1\37\4\0\5\37\1\200\21\37\30\0\2\37"+
    "\7\0\1\37\4\0\23\37\1\201\3\37\30\0\2\37"+
    "\7\0\1\37\4\0\4\37\1\202\6\37\1\203\6\37"+
    "\1\204\4\37\30\0\2\37\7\0\1\37\4\0\5\37"+
    "\1\205\3\37\1\206\15\37\30\0\2\37\7\0\1\37"+
    "\4\0\5\37\1\207\21\37\4\0\16\150\1\210\74\150"+
    "\1\210\4\150\1\211\51\150\24\0\2\37\7\0\1\37"+
    "\4\0\1\37\1\212\25\37\30\0\2\37\7\0\1\37"+
    "\4\0\11\37\1\213\15\37\30\0\2\37\7\0\1\37"+
    "\4\0\1\37\1\214\25\37\30\0\2\37\7\0\1\37"+
    "\4\0\5\37\1\215\21\37\30\0\2\37\7\0\1\37"+
    "\4\0\21\37\1\216\5\37\30\0\2\37\7\0\1\37"+
    "\4\0\11\37\1\217\15\37\30\0\2\37\7\0\1\37"+
    "\4\0\5\37\1\220\3\37\1\221\15\37\30\0\2\37"+
    "\7\0\1\37\4\0\23\37\1\222\3\37\30\0\2\37"+
    "\7\0\1\37\4\0\21\37\1\223\5\37\30\0\2\37"+
    "\7\0\1\37\4\0\23\37\1\224\3\37\30\0\2\37"+
    "\7\0\1\37\4\0\22\37\1\225\4\37\30\0\2\37"+
    "\7\0\1\37\4\0\16\37\1\226\10\37\30\0\2\37"+
    "\7\0\1\37\4\0\3\37\1\227\23\37\30\0\2\37"+
    "\7\0\1\37\4\0\20\37\1\230\2\37\1\231\3\37"+
    "\30\0\2\37\7\0\1\37\4\0\6\37\1\232\20\37"+
    "\30\0\2\37\7\0\1\37\4\0\5\37\1\233\21\37"+
    "\30\0\2\37\7\0\1\37\4\0\15\37\1\234\11\37"+
    "\30\0\2\37\7\0\1\37\4\0\5\37\1\235\21\37"+
    "\30\0\2\37\7\0\1\37\4\0\5\37\1\236\21\37"+
    "\30\0\2\37\7\0\1\37\4\0\5\37\1\237\21\37"+
    "\30\0\2\37\7\0\1\37\4\0\11\37\1\240\15\37"+
    "\30\0\2\37\7\0\1\37\4\0\15\37\1\241\11\37"+
    "\30\0\2\37\7\0\1\37\4\0\13\37\1\242\13\37"+
    "\30\0\2\37\7\0\1\37\4\0\13\37\1\243\13\37"+
    "\4\0\16\150\1\210\4\150\1\6\51\150\24\0\2\37"+
    "\7\0\1\37\4\0\21\37\1\244\5\37\30\0\2\37"+
    "\7\0\1\37\4\0\15\37\1\245\11\37\30\0\2\37"+
    "\7\0\1\37\4\0\12\37\1\246\14\37\30\0\2\37"+
    "\7\0\1\37\4\0\21\37\1\247\5\37\30\0\2\37"+
    "\7\0\1\37\4\0\15\37\1\250\11\37\30\0\2\37"+
    "\7\0\1\37\4\0\6\37\1\251\20\37\30\0\2\37"+
    "\7\0\1\37\4\0\20\37\1\252\6\37\30\0\2\37"+
    "\7\0\1\37\4\0\5\37\1\253\21\37\30\0\2\37"+
    "\7\0\1\37\4\0\13\37\1\254\13\37\30\0\2\37"+
    "\7\0\1\37\4\0\23\37\1\255\3\37\30\0\2\37"+
    "\7\0\1\37\4\0\26\37\1\256\30\0\2\37\7\0"+
    "\1\37\4\0\20\37\1\257\6\37\30\0\2\37\7\0"+
    "\1\37\4\0\20\37\1\260\6\37\30\0\2\37\7\0"+
    "\1\37\4\0\6\37\1\261\20\37\30\0\2\37\7\0"+
    "\1\37\4\0\21\37\1\262\5\37\30\0\2\37\7\0"+
    "\1\37\4\0\13\37\1\263\13\37\30\0\2\37\7\0"+
    "\1\37\4\0\5\37\1\264\21\37\30\0\2\37\7\0"+
    "\1\37\4\0\4\37\1\265\22\37\30\0\2\37\7\0"+
    "\1\37\4\0\5\37\1\266\21\37\30\0\2\37\7\0"+
    "\1\37\4\0\5\37\1\267\21\37\30\0\2\37\7\0"+
    "\1\37\4\0\5\37\1\270\21\37\30\0\2\37\7\0"+
    "\1\37\4\0\5\37\1\271\21\37\30\0\2\37\7\0"+
    "\1\37\4\0\15\37\1\272\11\37\30\0\2\37\7\0"+
    "\1\37\4\0\21\37\1\273\5\37\30\0\2\37\7\0"+
    "\1\37\4\0\4\37\1\274\22\37\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7076];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\1\2\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\2\11\3\1\1\11\2\1\3\11\20\1\1\11"+
    "\1\1\2\11\1\1\1\11\1\1\3\11\1\1\3\11"+
    "\1\0\1\11\1\1\3\11\33\1\6\11\2\0\1\11"+
    "\35\1\1\0\64\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
    , UnknownCharacterException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [177] { throw new UnknownCharacterException(yytext()); }");
            { throw new UnknownCharacterException(yytext());
            }
          // fall through
          case 91: break;
          case 2:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [157] {  }");
            { 
            }
          // fall through
          case 92: break;
          case 3:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [156] { /* ignore */ }");
            { /* ignore */
            }
          // fall through
          case 93: break;
          case 4:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return symbol(sym.NOT_OP); }");
            { return symbol(sym.NOT_OP);
            }
          // fall through
          case 94: break;
          case 5:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [106] { string.setLength(0); yybegin(STRING); }");
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 95: break;
          case 6:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [147] { return symbol(sym.DOLLAR); }");
            { return symbol(sym.DOLLAR);
            }
          // fall through
          case 96: break;
          case 7:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { return symbol(sym.MOD); }");
            { return symbol(sym.MOD);
            }
          // fall through
          case 97: break;
          case 8:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [140] { return symbol(sym.AND_BIT); }");
            { return symbol(sym.AND_BIT);
            }
          // fall through
          case 98: break;
          case 9:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { return symbol(sym.LEFT_PAREN); }");
            { return symbol(sym.LEFT_PAREN);
            }
          // fall through
          case 99: break;
          case 10:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [115] { return symbol(sym.RIGHT_PAREN); }");
            { return symbol(sym.RIGHT_PAREN);
            }
          // fall through
          case 100: break;
          case 11:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { return symbol(sym.MULTIPLY); }");
            { return symbol(sym.MULTIPLY);
            }
          // fall through
          case 101: break;
          case 12:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [111] { return symbol(sym.PLUS); }");
            { return symbol(sym.PLUS);
            }
          // fall through
          case 102: break;
          case 13:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { return symbol(sym.COMMA); }");
            { return symbol(sym.COMMA);
            }
          // fall through
          case 103: break;
          case 14:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return symbol(sym.MINUS); }");
            { return symbol(sym.MINUS);
            }
          // fall through
          case 104: break;
          case 15:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { return symbol(sym.DOT); }");
            { return symbol(sym.DOT);
            }
          // fall through
          case 105: break;
          case 16:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return symbol(sym.DIVIDE); }");
            { return symbol(sym.DIVIDE);
            }
          // fall through
          case 106: break;
          case 17:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [105] { return symbol(sym.INTEGER_LITERAL); }");
            { return symbol(sym.INTEGER_LITERAL);
            }
          // fall through
          case 107: break;
          case 18:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [146] { return symbol(sym.COLON); }");
            { return symbol(sym.COLON);
            }
          // fall through
          case 108: break;
          case 19:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [117] { return symbol(sym.SEMICOLON); }");
            { return symbol(sym.SEMICOLON);
            }
          // fall through
          case 109: break;
          case 20:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { return symbol(sym.LT); }");
            { return symbol(sym.LT);
            }
          // fall through
          case 110: break;
          case 21:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [109] { return symbol(sym.EQ); }");
            { return symbol(sym.EQ);
            }
          // fall through
          case 111: break;
          case 22:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { return symbol(sym.GT); }");
            { return symbol(sym.GT);
            }
          // fall through
          case 112: break;
          case 23:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [144] { return symbol(sym.QUESTION); }");
            { return symbol(sym.QUESTION);
            }
          // fall through
          case 113: break;
          case 24:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [148] { return symbol(sym.AT); }");
            { return symbol(sym.AT);
            }
          // fall through
          case 114: break;
          case 25:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [102] { return symbol(sym.IDENTIFIER); }");
            { return symbol(sym.IDENTIFIER);
            }
          // fall through
          case 115: break;
          case 26:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [118] { return symbol(sym.LEFT_BRACKET); }");
            { return symbol(sym.LEFT_BRACKET);
            }
          // fall through
          case 116: break;
          case 27:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [119] { return symbol(sym.RIGHT_BRACKET); }");
            { return symbol(sym.RIGHT_BRACKET);
            }
          // fall through
          case 117: break;
          case 28:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { return symbol(sym.XOR_BIT); }");
            { return symbol(sym.XOR_BIT);
            }
          // fall through
          case 118: break;
          case 29:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { return symbol(sym.LEFT_BRACE); }");
            { return symbol(sym.LEFT_BRACE);
            }
          // fall through
          case 119: break;
          case 30:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { return symbol(sym.OR_BIT); }");
            { return symbol(sym.OR_BIT);
            }
          // fall through
          case 120: break;
          case 31:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [113] { return symbol(sym.RIGHT_BRACE); }");
            { return symbol(sym.RIGHT_BRACE);
            }
          // fall through
          case 121: break;
          case 32:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [143] { return symbol(sym.NOT_BIT); }");
            { return symbol(sym.NOT_BIT);
            }
          // fall through
          case 122: break;
          case 33:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [166] { string.append( yytext() ); }");
            { string.append( yytext() );
            }
          // fall through
          case 123: break;
          case 34:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [163] { yybegin(YYINITIAL);"+ZZ_NL+"                                   return symbol(sym.STRING_LITERAL,"+ZZ_NL+"                                   string.toString()); }");
            { yybegin(YYINITIAL);
                                   return symbol(sym.STRING_LITERAL,
                                   string.toString());
            }
          // fall through
          case 124: break;
          case 35:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { string.append(\'\\\\\'); }");
            { string.append('\\');
            }
          // fall through
          case 125: break;
          case 36:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { return symbol(sym.NEQ); }");
            { return symbol(sym.NEQ);
            }
          // fall through
          case 126: break;
          case 37:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [138] { return symbol(sym.MOD_AS); }");
            { return symbol(sym.MOD_AS);
            }
          // fall through
          case 127: break;
          case 38:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { return symbol(sym.AND_OP); }");
            { return symbol(sym.AND_OP);
            }
          // fall through
          case 128: break;
          case 39:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { return symbol(sym.EXP); }");
            { return symbol(sym.EXP);
            }
          // fall through
          case 129: break;
          case 40:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { return symbol(sym.MULTIPLY_AS); }");
            { return symbol(sym.MULTIPLY_AS);
            }
          // fall through
          case 130: break;
          case 41:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { return symbol(sym.PLUS_AS); }");
            { return symbol(sym.PLUS_AS);
            }
          // fall through
          case 131: break;
          case 42:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { return symbol(sym.MINUS_AS); }");
            { return symbol(sym.MINUS_AS);
            }
          // fall through
          case 132: break;
          case 43:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [137] { return symbol(sym.DIVIDE_AS); }");
            { return symbol(sym.DIVIDE_AS);
            }
          // fall through
          case 133: break;
          case 44:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { return symbol(sym.LE); }");
            { return symbol(sym.LE);
            }
          // fall through
          case 134: break;
          case 45:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [110] { return symbol(sym.EQEQ); }");
            { return symbol(sym.EQEQ);
            }
          // fall through
          case 135: break;
          case 46:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { return symbol(sym.GE); }");
            { return symbol(sym.GE);
            }
          // fall through
          case 136: break;
          case 47:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [149] { return symbol(sym.ATAT); }");
            { return symbol(sym.ATAT);
            }
          // fall through
          case 137: break;
          case 48:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [71] { return symbol(sym.DO); }");
            { return symbol(sym.DO);
            }
          // fall through
          case 138: break;
          case 49:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { return symbol(sym.IF); }");
            { return symbol(sym.IF);
            }
          // fall through
          case 139: break;
          case 50:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] { return symbol(sym.IN); }");
            { return symbol(sym.IN);
            }
          // fall through
          case 140: break;
          case 51:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [83] { return symbol(sym.OR); }");
            { return symbol(sym.OR);
            }
          // fall through
          case 141: break;
          case 52:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { return symbol(sym.OR_OP); }");
            { return symbol(sym.OR_OP);
            }
          // fall through
          case 142: break;
          case 53:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [171] { string.append(\'\\\"\'); }");
            { string.append('\"');
            }
          // fall through
          case 143: break;
          case 54:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [168] { string.append(\'\\n\'); }");
            { string.append('\n');
            }
          // fall through
          case 144: break;
          case 55:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [170] { string.append(\'\\r\'); }");
            { string.append('\r');
            }
          // fall through
          case 145: break;
          case 56:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [167] { string.append(\'\\t\'); }");
            { string.append('\t');
            }
          // fall through
          case 146: break;
          case 57:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { return symbol(sym.EXP_AS); }");
            { return symbol(sym.EXP_AS);
            }
          // fall through
          case 147: break;
          case 58:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { return symbol(sym.C_COMPARISON); }");
            { return symbol(sym.C_COMPARISON);
            }
          // fall through
          case 148: break;
          case 59:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [65] { return symbol(sym.AND); }");
            { return symbol(sym.AND);
            }
          // fall through
          case 149: break;
          case 60:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [69] { return symbol(sym.DEF); }");
            { return symbol(sym.DEF);
            }
          // fall through
          case 150: break;
          case 61:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [63] { return symbol(sym.END); }");
            { return symbol(sym.END);
            }
          // fall through
          case 151: break;
          case 62:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [76] { return symbol(sym.FOR); }");
            { return symbol(sym.FOR);
            }
          // fall through
          case 152: break;
          case 63:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [81] { return symbol(sym.NIL); }");
            { return symbol(sym.NIL);
            }
          // fall through
          case 153: break;
          case 64:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [82] { return symbol(sym.NOT); }");
            { return symbol(sym.NOT);
            }
          // fall through
          case 154: break;
          case 65:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [67] { return symbol(sym.CASE); }");
            { return symbol(sym.CASE);
            }
          // fall through
          case 155: break;
          case 66:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [72] { return symbol(sym.ELSE); }");
            { return symbol(sym.ELSE);
            }
          // fall through
          case 156: break;
          case 67:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [80] { return symbol(sym.NEXT); }");
            { return symbol(sym.NEXT);
            }
          // fall through
          case 157: break;
          case 68:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [84] { return symbol(sym.REDO); }");
            { return symbol(sym.REDO);
            }
          // fall through
          case 158: break;
          case 69:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] { return symbol(sym.SELF); }");
            { return symbol(sym.SELF);
            }
          // fall through
          case 159: break;
          case 70:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [90] { return symbol(sym.THEN); }");
            { return symbol(sym.THEN);
            }
          // fall through
          case 160: break;
          case 71:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { return symbol(sym.TRUE); }");
            { return symbol(sym.TRUE);
            }
          // fall through
          case 161: break;
          case 72:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { return symbol(sym.WHEN); }");
            { return symbol(sym.WHEN);
            }
          // fall through
          case 162: break;
          case 73:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [64] { return symbol(sym.ALIAS); }");
            { return symbol(sym.ALIAS);
            }
          // fall through
          case 163: break;
          case 74:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [62] { return symbol(sym.BEGIN); }");
            { return symbol(sym.BEGIN);
            }
          // fall through
          case 164: break;
          case 75:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [66] { return symbol(sym.BREAK); }");
            { return symbol(sym.BREAK);
            }
          // fall through
          case 165: break;
          case 76:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [68] { return symbol(sym.CLASS); }");
            { return symbol(sym.CLASS);
            }
          // fall through
          case 166: break;
          case 77:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return symbol(sym.ELSIF); }");
            { return symbol(sym.ELSIF);
            }
          // fall through
          case 167: break;
          case 78:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [75] { return symbol(sym.FALSE); }");
            { return symbol(sym.FALSE);
            }
          // fall through
          case 168: break;
          case 79:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [86] { return symbol(sym.RETRY); }");
            { return symbol(sym.RETRY);
            }
          // fall through
          case 169: break;
          case 80:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [89] { return symbol(sym.SUPER); }");
            { return symbol(sym.SUPER);
            }
          // fall through
          case 170: break;
          case 81:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [92] { return symbol(sym.UNDEF); }");
            { return symbol(sym.UNDEF);
            }
          // fall through
          case 171: break;
          case 82:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [94] { return symbol(sym.UNTIL); }");
            { return symbol(sym.UNTIL);
            }
          // fall through
          case 172: break;
          case 83:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [96] { return symbol(sym.WHILE); }");
            { return symbol(sym.WHILE);
            }
          // fall through
          case 173: break;
          case 84:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { return symbol(sym.YIELD); }");
            { return symbol(sym.YIELD);
            }
          // fall through
          case 174: break;
          case 85:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { return symbol(sym.ENSURE); }");
            { return symbol(sym.ENSURE);
            }
          // fall through
          case 175: break;
          case 86:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return symbol(sym.MODULE); }");
            { return symbol(sym.MODULE);
            }
          // fall through
          case 176: break;
          case 87:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { return symbol(sym.RESCUE); }");
            { return symbol(sym.RESCUE);
            }
          // fall through
          case 177: break;
          case 88:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [87] { return symbol(sym.RETURN); }");
            { return symbol(sym.RETURN);
            }
          // fall through
          case 178: break;
          case 89:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [93] { return symbol(sym.UNLESS); }");
            { return symbol(sym.UNLESS);
            }
          // fall through
          case 179: break;
          case 90:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [70] { return symbol(sym.DEFINED); }");
            { return symbol(sym.DEFINED);
            }
          // fall through
          case 180: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
